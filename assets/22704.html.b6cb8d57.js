import{h as n}from"./app.4ca8afde.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="laravel-5-5\u6DFB\u52A0\u81EA\u5B9A\u4E49\u8868\u5355\u9A8C\u8BC1\u89C4\u5219" tabindex="-1"><a class="header-anchor" href="#laravel-5-5\u6DFB\u52A0\u81EA\u5B9A\u4E49\u8868\u5355\u9A8C\u8BC1\u89C4\u5219" aria-hidden="true">#</a> Laravel 5.5\u6DFB\u52A0\u81EA\u5B9A\u4E49\u8868\u5355\u9A8C\u8BC1\u89C4\u5219</h1><p>\u5B58\u5728\u9A8C\u8BC1\u7801\u8EAB\u4EFD\u8BC1\u7684\u51FD\u6570\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string">&#39;is_card&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token operator">/</span>
      <span class="token operator">*</span> \u8EAB\u4EFD\u8BC1\u53F7
      <span class="token operator">*</span> @param $str
      <span class="token operator">*</span> @<span class="token keyword">return</span> bool
      <span class="token operator">*</span><span class="token operator">/</span>
     <span class="token keyword">function</span> <span class="token function">is_card</span><span class="token punctuation">(</span><span class="token parameter">$str</span><span class="token punctuation">)</span>
     <span class="token punctuation">{</span>
         $str <span class="token operator">=</span> <span class="token function">strtoupper</span><span class="token punctuation">(</span>$str<span class="token punctuation">)</span><span class="token punctuation">;</span>
         $regx <span class="token operator">=</span> <span class="token string">&quot;/(^d{15}$)|(^d{17}([0-9]|X)$)/&quot;</span><span class="token punctuation">;</span>
         $arr_split <span class="token operator">=</span> <span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span>$regx<span class="token punctuation">,</span> $str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
         <span class="token comment">//\u68C0\u67E515\u4F4D</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">15</span> <span class="token operator">==</span> <span class="token function">strlen</span><span class="token punctuation">(</span>$str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             $regx <span class="token operator">=</span> <span class="token string">&quot;/^(d{6})+(d{2})+(d{2})+(d{2})+(d{3})$/&quot;</span><span class="token punctuation">;</span>
             @<span class="token function">preg_match</span><span class="token punctuation">(</span>$regx<span class="token punctuation">,</span> $str<span class="token punctuation">,</span> $arr_split<span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token comment">//\u68C0\u67E5\u751F\u65E5\u65E5\u671F\u662F\u5426\u6B63\u786E</span>
             $dtm_birth <span class="token operator">=</span> <span class="token string">&quot;19&quot;</span> <span class="token punctuation">.</span> $arr_split<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">&#39;/&#39;</span> <span class="token punctuation">.</span> $arr_split<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">&#39;/&#39;</span> <span class="token punctuation">.</span> $arr_split<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strtotime</span><span class="token punctuation">(</span>$dtm_birth<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                 <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
             <span class="token comment">//\u68C0\u67E518\u4F4D</span>
             $regx <span class="token operator">=</span> <span class="token string">&quot;/^(d{6})+(d{4})+(d{2})+(d{2})+(d{3})([0-9]|X)$/&quot;</span><span class="token punctuation">;</span>
             @<span class="token function">preg_match</span><span class="token punctuation">(</span>$regx<span class="token punctuation">,</span> $str<span class="token punctuation">,</span> $arr_split<span class="token punctuation">)</span><span class="token punctuation">;</span>
             $dtm_birth <span class="token operator">=</span> $arr_split<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">&#39;/&#39;</span> <span class="token punctuation">.</span> $arr_split<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">&#39;/&#39;</span> <span class="token punctuation">.</span> $arr_split<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
             <span class="token comment">//\u68C0\u67E5\u751F\u65E5\u65E5\u671F\u662F\u5426\u6B63\u786E</span>
             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strtotime</span><span class="token punctuation">(</span>$dtm_birth<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                 <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                 <span class="token comment">//\u68C0\u9A8C18\u4F4D\u8EAB\u4EFD\u8BC1\u7684\u6821\u9A8C\u7801\u662F\u5426\u6B63\u786E\u3002</span>
                 <span class="token comment">//\u6821\u9A8C\u4F4D\u6309\u7167ISO 7064:1983.MOD 11-2\u7684\u89C4\u5B9A\u751F\u6210\uFF0CX\u53EF\u4EE5\u8BA4\u4E3A\u662F\u6570\u5B5710\u3002</span>
                 $arr_int <span class="token operator">=</span> <span class="token function">array</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                 $arr_ch <span class="token operator">=</span> <span class="token function">array</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;X&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;9&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                 $sign <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                 <span class="token keyword">for</span> <span class="token punctuation">(</span>$i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> $i <span class="token operator">&lt;</span> <span class="token number">17</span><span class="token punctuation">;</span> $i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                     $b <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span>$str<span class="token punctuation">{</span>$i<span class="token punctuation">}</span><span class="token punctuation">;</span>
                     $w <span class="token operator">=</span> $arr_int<span class="token punctuation">[</span>$i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                     $sign <span class="token operator">+=</span> $b <span class="token operator">*</span> $w<span class="token punctuation">;</span>
                 <span class="token punctuation">}</span>
                 $n <span class="token operator">=</span> $sign <span class="token operator">%</span> <span class="token number">11</span><span class="token punctuation">;</span>
                 $str_num <span class="token operator">=</span> $arr_ch<span class="token punctuation">[</span>$n<span class="token punctuation">]</span><span class="token punctuation">;</span>
                 <span class="token keyword">if</span> <span class="token punctuation">(</span>$str_num <span class="token operator">!=</span> <span class="token function">substr</span><span class="token punctuation">(</span>$str<span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                 <span class="token punctuation">}</span>
             <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre></div><p>\u4EE5\u4E0A\u51FD\u6570\u6DFB\u52A0\u5230laravel\u7684\u9A8C\u8BC1\u5668\u4E2D\uFF0C\u5B9E\u73B0\u65B9\u6CD5\uFF1A</p><p>1\u3001\u670D\u52A1\u63D0\u4F9B\u8005 AppServiceProvider@boot\u65B9\u6CD5\u4E0B\u6DFB\u52A0\u4EE3\u7801\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code>use Validator<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token comment">//Schema::defaultStringLength(191);</span>
   <span class="token comment">//\u81EA\u5B9A\u4E49\u9A8C\u8BC1\u7801\u89C4\u5219 Validator::_extend_(&#39;is_card&#39;, function ($attribute, $value, $parameters) {</span>
      <span class="token keyword">return</span> <span class="token function">is_card</span><span class="token punctuation">(</span>$value<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>2\u3001cn/validation.php \u9A8C\u8BC1\u89C4\u5219\u4E2D\u6587\u5305\u6700\u540E\u6DFB\u52A0\u4E00\u6761\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token string">&#39;is_card&#39;</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;:attribute \u683C\u5F0F\u4E0D\u6B63\u786E\u3002&#39;</span><span class="token punctuation">,</span>
</code></pre></div><p>3\u3001\u4F7F\u7528</p><div class="language-javascript ext-js"><pre class="language-javascript"><code>$validator <span class="token operator">=</span> Validator<span class="token operator">:</span><span class="token operator">:</span><span class="token function">make</span><span class="token punctuation">(</span>$request<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
     <span class="token string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;required&#39;</span><span class="token punctuation">,</span>
     <span class="token string">&#39;phone&#39;</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;required|regex:/^1[23456789]d{9}$/i&#39;</span><span class="token punctuation">,</span>
     <span class="token string">&#39;card&#39;</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;required|is_card&#39;</span><span class="token punctuation">,</span>
 <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>\u6CE8\u610F\uFF1Ais_card\u547D\u540D\u5FC5\u987B\u662Fis_card\uFF0C\u4E0D\u80FD\u4F7F\u7528isCard\u8FD9\u79CD\u547D\u540D</p>`,11);function t(o,c){return p}var l=s(a,[["render",t]]);export{l as default};
