import{h as s}from"./app.4ca8afde.js";import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=s(`<h1 id="jmeter\u63A5\u53E3\u6D4B\u8BD5-response-data\u8FD4\u56DE\u4E2D\u6587\u4E71\u7801\u548Cjson\u6570\u636E\u8F6C\u7801" tabindex="-1"><a class="header-anchor" href="#jmeter\u63A5\u53E3\u6D4B\u8BD5-response-data\u8FD4\u56DE\u4E2D\u6587\u4E71\u7801\u548Cjson\u6570\u636E\u8F6C\u7801" aria-hidden="true">#</a> JMeter\u63A5\u53E3\u6D4B\u8BD5\uFF0CResponse Data\u8FD4\u56DE\u4E2D\u6587\u4E71\u7801\u548Cjson\u6570\u636E\u8F6C\u7801</h1><p>\u5F53\u6CA1\u6709\u8BBE\u7F6E\u7F16\u7801\u65F6\uFF0Cjmeter\u4F1A\u6309\u7167jmeter.properties\u6587\u4EF6\u4E2D\u7684sampleresult.default.encoding\u8BBE\u7F6E\u7684\u683C\u5F0F\u89E3\u6790\uFF0C\u5BF9\u4E8E\u4E2D\u6587\u89E3\u6790\u4F7F\u7528ISO-8859-1\u7F16\u7801\u80AF\u5B9A\u4F1A\u51FA\u9519\u3002\u53EF\u4EE5\u901A\u8FC7\u4EE5\u4E0B\u8BF4\u660E\u89E3\u51B3\u95EE\u9898</p><h2 id="\u4E2D\u6587\u4E71\u7801\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#\u4E2D\u6587\u4E71\u7801\u95EE\u9898" aria-hidden="true">#</a> \u4E2D\u6587\u4E71\u7801\u95EE\u9898</h2><p>\u6709\u4E24\u79CD\u65B9\u5F0F\uFF1A</p><h3 id="\u4FEE\u6539jmeter-properties\u6587\u4EF6-\u6C38\u4E45\u4FEE\u6539" tabindex="-1"><a class="header-anchor" href="#\u4FEE\u6539jmeter-properties\u6587\u4EF6-\u6C38\u4E45\u4FEE\u6539" aria-hidden="true">#</a> \u4FEE\u6539jmeter.properties\u6587\u4EF6\uFF08\u6C38\u4E45\u4FEE\u6539\uFF09</h3><p>1\u3001apache-jmeter-4.0\u6253\u5F00\u5B89\u88C5\u8DEF\u5F84injmeter.properties\u6587\u4EF6\uFF0C\u641C\u7D22\u201Cdefault.encoding\u201D\u5173\u952E\u5B57\uFF0C\u627E\u5230\u5982\u4E0B\u914D\u7F6E\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code># The encoding to be used <span class="token keyword">if</span> none is <span class="token function">provided</span> <span class="token punctuation">(</span><span class="token keyword">default</span> <span class="token constant">ISO</span><span class="token operator">-</span><span class="token number">8859</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
#sampleresult<span class="token punctuation">.</span>default<span class="token punctuation">.</span>encoding<span class="token operator">=</span><span class="token constant">ISO</span><span class="token operator">-</span><span class="token number">8859</span><span class="token operator">-</span><span class="token number">1</span>
</code></pre></div><p>2\u3001\u5C06\u6CE8\u91CA#\u5220\u6389\uFF0C\u5E76\u6539\u6210utf-8\u7F16\u7801\uFF0C\u5982\u4E0B\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code># The encoding to be used <span class="token keyword">if</span> none is <span class="token function">provided</span> <span class="token punctuation">(</span><span class="token keyword">default</span> utf<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span>
sampleresult<span class="token punctuation">.</span>default<span class="token punctuation">.</span>encoding<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span>
</code></pre></div><p>3\u3001\u91CD\u542FJMeter\u5373\u53EF</p><h3 id="\u4F7F\u7528beanshell-postprocessor-\u52A8\u6001\u4FEE\u6539" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528beanshell-postprocessor-\u52A8\u6001\u4FEE\u6539" aria-hidden="true">#</a> \u4F7F\u7528BeanShell PostProcessor\uFF08\u52A8\u6001\u4FEE\u6539\uFF09</h3><p>1\u3001\u6307\u5B9A\u8BF7\u6C42\u8282\u70B9\u4E0B\uFF0C\u65B0\u5EFA\u540E\u7F6E\u63A7\u5236\u5668\u201DBeanShell PostProcessor\u201D</p><p>2\u3001\u5176\u811A\u672C\u6846\u4E2D\u8F93\u5165\uFF1Aprev.setDataEncoding(\u201CUTF-8\u201D);</p><p>3\u3001\u4FDD\u5B58</p><h2 id="json\u6570\u636E\u8F6C\u7801-unicode\u8F6C\u6210\u4E2D\u6587" tabindex="-1"><a class="header-anchor" href="#json\u6570\u636E\u8F6C\u7801-unicode\u8F6C\u6210\u4E2D\u6587" aria-hidden="true">#</a> json\u6570\u636E\u8F6C\u7801\uFF08unicode\u8F6C\u6210\u4E2D\u6587\uFF09</h2><p>\u9996\u5148\u628A\u8FD4\u56DE\u6570\u636E\u8BBE\u7F6E\u4E3A\u201Cjson\u201D\u683C\u5F0F\u3002\u5728Jmeter\u91CC\u9762\u7684\u67E5\u770B\u7ED3\u679C\u6811\u7684\u8F93\u51FA\u6846\u5DE6\u4FA7\u6709\u4E00\u680F\uFF0C\u53EF\u4EE5\u5207\u6362\u54CD\u5E94\u8F93\u51FA\u7684\u683C\u5F0F\uFF0C\u5982\u4E0B\u56FE\uFF1A</p><p>1\u3001\u5728\u540E\u7F6E\u5904\u7406\u5668\u4E2D\u589E\u52A0 bean shell preprocessor</p><p>2\u3001\u52A0\u5165script:</p><div class="language-javascript ext-js"><pre class="language-javascript"><code>prev<span class="token punctuation">.</span><span class="token function">setDataEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
String s2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>prev<span class="token punctuation">.</span><span class="token function">getResponseData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//---------------\u4E00\u4E0B\u6B65\u9AA4\u4E3A\u8F6C\u7801\u8FC7\u7A0B---------------</span>
        char aChar<span class="token punctuation">;</span>
        int len<span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        StringBuffer outBuffer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>int x <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            aChar<span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>aChar<span class="token operator">==</span><span class="token string">&#39;\\\\&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                aChar<span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>aChar<span class="token operator">==</span><span class="token string">&#39;u&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    int value <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
                    <span class="token keyword">for</span><span class="token punctuation">(</span>int i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        aChar<span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">switch</span><span class="token punctuation">(</span>aChar<span class="token punctuation">)</span><span class="token punctuation">{</span>
                            <span class="token keyword">case</span><span class="token string">&#39;0&#39;</span><span class="token operator">:</span>
                            <span class="token keyword">case</span><span class="token string">&#39;1&#39;</span><span class="token operator">:</span>
                            <span class="token keyword">case</span><span class="token string">&#39;2&#39;</span><span class="token operator">:</span>
                            <span class="token keyword">case</span><span class="token string">&#39;3&#39;</span><span class="token operator">:</span>
                            <span class="token keyword">case</span><span class="token string">&#39;4&#39;</span><span class="token operator">:</span>
                            <span class="token keyword">case</span><span class="token string">&#39;5&#39;</span><span class="token operator">:</span>
                            <span class="token keyword">case</span><span class="token string">&#39;6&#39;</span><span class="token operator">:</span>
                            <span class="token keyword">case</span><span class="token string">&#39;7&#39;</span><span class="token operator">:</span>
                            <span class="token keyword">case</span><span class="token string">&#39;8&#39;</span><span class="token operator">:</span>
                            <span class="token keyword">case</span><span class="token string">&#39;9&#39;</span><span class="token operator">:</span>
                                value<span class="token operator">=</span><span class="token punctuation">(</span>value <span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>aChar<span class="token operator">-</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>
                                <span class="token keyword">break</span><span class="token punctuation">;</span>
                            <span class="token keyword">case</span><span class="token string">&#39;a&#39;</span><span class="token operator">:</span>
                            <span class="token keyword">case</span><span class="token string">&#39;b&#39;</span><span class="token operator">:</span>
                            <span class="token keyword">case</span><span class="token string">&#39;c&#39;</span><span class="token operator">:</span>
                            <span class="token keyword">case</span><span class="token string">&#39;d&#39;</span><span class="token operator">:</span>
                            <span class="token keyword">case</span><span class="token string">&#39;e&#39;</span><span class="token operator">:</span>
                            <span class="token keyword">case</span><span class="token string">&#39;f&#39;</span><span class="token operator">:</span>
                                value<span class="token operator">=</span><span class="token punctuation">(</span>value <span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token operator">+</span>aChar<span class="token operator">-</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span>
                                <span class="token keyword">break</span><span class="token punctuation">;</span>
                            <span class="token keyword">case</span><span class="token string">&#39;A&#39;</span><span class="token operator">:</span>
                            <span class="token keyword">case</span><span class="token string">&#39;B&#39;</span><span class="token operator">:</span>
                            <span class="token keyword">case</span><span class="token string">&#39;C&#39;</span><span class="token operator">:</span>
                            <span class="token keyword">case</span><span class="token string">&#39;D&#39;</span><span class="token operator">:</span>
                            <span class="token keyword">case</span><span class="token string">&#39;E&#39;</span><span class="token operator">:</span>
                            <span class="token keyword">case</span><span class="token string">&#39;F&#39;</span><span class="token operator">:</span>
                                value<span class="token operator">=</span><span class="token punctuation">(</span>value <span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token operator">+</span>aChar<span class="token operator">-</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">;</span>
                                <span class="token keyword">break</span><span class="token punctuation">;</span>
                            <span class="token keyword">default</span><span class="token operator">:</span>
                                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>
                                        <span class="token string">&quot;Malformed   \\\\uxxxx  encoding.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
                    outBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>aChar<span class="token operator">==</span><span class="token string">&#39;t&#39;</span><span class="token punctuation">)</span>
                        aChar<span class="token operator">=</span><span class="token string">&#39;\\t&#39;</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>aChar<span class="token operator">==</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span>
                    aChar<span class="token operator">=</span><span class="token string">&#39;\\r&#39;</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>aChar<span class="token operator">==</span><span class="token string">&#39;n&#39;</span><span class="token punctuation">)</span>
                    aChar<span class="token operator">=</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>aChar<span class="token operator">==</span><span class="token string">&#39;f&#39;</span><span class="token punctuation">)</span>
                    aChar<span class="token operator">=</span><span class="token string">&#39;\\f&#39;</span><span class="token punctuation">;</span>
                    outBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>aChar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span>
                outBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>aChar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token comment">//-----------------\u4EE5\u4E0A\u5185\u5BB9\u4E3A\u8F6C\u7801\u8FC7\u7A0B---------------------------</span>
<span class="token comment">//\u5C06\u8F6C\u6210\u4E2D\u6587\u7684\u54CD\u5E94\u7ED3\u679C\u5728\u67E5\u770B\u7ED3\u679C\u6811\u4E2D\u663E\u793A</span>
prev<span class="token punctuation">.</span><span class="token function">setResponseData</span><span class="token punctuation">(</span>outBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>3\u3001\u5173\u95ED\u7A0B\u5E8F\uFF0C\u91CD\u65B0\u542F\u52A8\uFF0C\u8FD0\u884C\u811A\u672C</p>`,20);function t(o,e){return p}var l=n(a,[["render",t]]);export{l as default};
